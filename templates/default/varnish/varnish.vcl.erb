vcl 4.0;

import directors;

<% node['cxn']['domains'].each do |config| -%>
backend s3_<%= config.id %><%= if config.has_key? 'fallbacks' then '_default' else '' end  %> {
    <% if node['cxn']['siblings'][node['hostname']] -%>
    .host = "<%= node['cxn']['siblings'][node['hostname']] %>";
    <% else -%>
    .host = "<%= config.bucket %>.s3<%= if config.has_key? 'bucket_region' then '-' + config.bucket_region else '' end %>.amazonaws.com";
    <% end -%>
    .port = "80";
    .connect_timeout = 5s;
    .first_byte_timeout = 10s;
    .between_bytes_timeout = 10s;
    <% if config.has_key? "probe" -%>
    .probe = {
        .url = "<%= config['probe'] %>";
    }
    <% end -%>
}
<% if config.has_key? 'fallbacks' -%>

<% config.fallbacks.each_with_index do |fallback, fallback_index| -%>

backend s3_<%= config.id %>_<%= fallback_index  %> {
    .host = "<%= fallback.bucket %>.s3<%= if fallback.has_key? 'bucket_region' then '-' + fallback.bucket_region else '' end %>.amazonaws.com";
    .port = "80";
    .connect_timeout = 5s;
    .first_byte_timeout = 10s;
    .between_bytes_timeout = 10s;
    <% if config.has_key? "probe" -%>
    .probe = {
        .url = "<%= config['probe'] %>";
    }
    <% end -%>
}
<% end # fallbacks.each_with_index -%>
<% end # config.has_key? 'fallbacks' -%>
<% end # node['cxn']['domains'].each -%>

sub vcl_init {
<% node['cxn']['domains'].each do |config| -%>
    <%- next unless config.has_key? 'fallbacks' %>

    new s3_<%= config.id %> = directors.fallback();
    s3_<%= config.id %>.add_backend(s3_<%= config.id %>_default);
    <% config.fallbacks.each_with_index do |fallback, fallback_index| -%>
    s3_<%= config.id %>.add_backend(s3_<%= config.id %>_<%= fallback_index %>);
    <% end -%>

<% end -%>
}
sub vcl_recv {
    #save the original host header in x-host since we need
    #to clear this up before going to s3.
    set req.http.x-host = req.http.host;

<% node['cxn']['domains'].each do |config| -%>
    if (req.http.host == "<%= config.domain %>" || req.http.purgehost == "<%= config.domain %>") {
      <% if !node['cxn']['siblings'][node['hostname']] -%>
      unset req.http.host;
      <% end -%>
      <% if config.has_key? 'fallbacks' -%>
      set req.backend_hint = s3_<%= config.id %>.backend();
      <% else -%>
      set req.backend_hint = s3_<%= config.id %>;
      <% end -%>

      <% if config.has_key? 'rewrites' -%>
      <% config['rewrites'].each do |rewrite| %>
      set req.url = regsub(req.url, "<%= rewrite[0] %>", "<%= rewrite[1] %>");
      <% end -%>
      <% end -%>
    }
<% end -%>

    set req.url = regsub(req.url, "\?.*", "");

    if (req.method == "DELETE") {
        #use the purgehost header to purge cache
        #req.http.host is an internal IP in these cases.
        ban("obj.http.x-url ~ " + req.url +
            " && obj.http.x-host ~ " + req.http.purgehost);

        return (synth(200, "OK"));
    }

    if (req.url == "/health" || req.url == "/"){
        return (synth(200, "OK"));
    }


    # remove headers from request
    unset req.http.cookie;
    unset req.http.cache-control;
    unset req.http.pragma;
    unset req.http.expires;
    unset req.http.etag;
    unset req.http.X-Forwarded-For;
}

sub vcl_synth {
    if (resp.status == 200 && req.method == "DELETE") {
        synthetic("PURGED " + req.http.purgehost);
        return (deliver);
    }
    if (resp.status == 200 && req.url ~ "^/$") {
        synthetic("");
        return (deliver);
    }
    if (resp.status == 200 && req.url == "/health") {
        synthetic("OK");
        return (deliver);
    }
}

sub vcl_backend_response {
    if ( beresp.http.Content-Length ~ "[0-9]{8,}" ) {
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
        return (deliver);
    }
}

sub vcl_deliver {
    # remove s3 headers from response
    unset resp.http.X-Amz-Id-2;
    unset resp.http.X-Amz-Meta-Group;
    unset resp.http.X-Amz-Meta-Owner;
    unset resp.http.X-Amz-Meta-Permissions;
    unset resp.http.X-Amz-Request-Id;
    unset resp.http.x-amz-replication-status;
    unset resp.http.x-amz-version-id;
    unset resp.http.x-amz-replication-status;
    unset resp.http.Age;
    unset resp.http.x-host;

    if (obj.hits > 0) {
        set resp.http.X-Cache = "HIT";
    } else {
        set resp.http.X-Cache = "MISS";
    }
}

sub vcl_backend_response {
    set beresp.http.x-url = bereq.url;

    #store the host header of the original request:
    set beresp.http.x-host = bereq.http.x-host;

    if (beresp.http.content-type ~ "(text|application)") {
        set beresp.do_gzip = true;
    } else {
        set beresp.do_gzip = false;
    }

    if (beresp.http.content-type ~ "(gzip|octet|x-tar)") {
        set beresp.do_gzip = false;
    }

    if ( beresp.status >= 400 ) {
        set beresp.ttl = 0s;
        set beresp.uncacheable = true;
    } else {
        set beresp.ttl = 3h;
    }
}

sub vcl_hash {
    hash_data(req.url);
    hash_data(req.backend_hint);
}
